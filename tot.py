import logging
import telebot
from telebot import types
import requests

from api_token import API_TOKEN

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

chat_history = {}  # chat_id: list of messages [{role: 'user'/'assistant', content: str}]

# –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
def get_bot_response(messages_history: list) -> str:
    try:
        response = requests.post(
            'http://localhost:1234/v1/chat/completions',
            headers={'Content-Type': 'application/json'},
            json={
                'model': 'meta-llama-3.1-8b-instruct',
                'messages': messages_history,
                'temperature': 0.7,
                'max_tokens': 800
            },
            timeout=60
        )
    except Exception as e:
        print(str(e))
        return 'LM studio not running' if "–æ—Ç–≤–µ—Ä–≥ –∑–∞–ø—Ä–æ—Å" in str(e) else str(e)
    
    return response.json()['choices'][0]['message']['content']


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üí¨ –ß–∞—Ç')
    markup.row('üóì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', 'üìö –£—á—ë–±–∞')
    markup.row('‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ', 'üòÇ –ú–µ–º—ã')
    return markup

@bot.message_handler(commands=['start'])
def handle_start(message):
    logger.info(f"/start –æ—Ç {message.from_user.id}")
    text = (
        "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–¢–û–¢! "
        "—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
    )
    # bot.send_message(message.chat.id, text, reply_markup=main_menu())
    bot.send_chat_action(message.chat.id, text)

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
# @bot.message_handler(func=lambda m: m.text == 'üí¨ –ß–∞—Ç')
# def handle_chat(message):
#     bot.send_message(message.chat.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∏ —è –æ—Ç–≤–µ—á—É!")


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –≤—Å—ë, —á—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    chat_id = message.chat.id
    user_text = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {chat_id}: {user_text}")
    bot.send_chat_action(chat_id, 'typing')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    if chat_id not in chat_history:
        chat_history[chat_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_history[chat_id].append({'role': 'user', 'content': user_text})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ LM Studio
    reply = get_bot_response(chat_history[chat_id])  # ‚¨ÖÔ∏è –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_history[chat_id].append({'role': 'assistant', 'content': reply})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id, reply)
    print(chat_history)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
