import logging
import telebot
from telebot import types
import requests


from api_token import API_TOKEN

from db_models import init_db, save_message, get_history

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


user_modes = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

CHAT_MODES = {
    'üí¨ –ß–∞—Ç': 'chat_default',
    '‚åö –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫': 'chat_planner',
    'üìö –£—á—ë–±–∞': 'chat_study',
    '‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ': 'chat_health',
    'üòÇ –ú–µ–º—ã': 'chat_memes',
}

PROMPTS = {
    'chat_default': '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
    'chat_planner': '–ü–æ–º–æ–≥–∞–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
    'chat_study': '–ü–æ–º–æ–≥–∞–π —Å –æ–±—É—á–µ–Ω–∏–µ–º, –æ–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–∏—è –ø—Ä–æ—Å—Ç–æ.',
    'chat_health': '–î–∞—ë—à—å —Å–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏.',
    'chat_memes': '–û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º, –≤—Å—Ç–∞–≤–ª—è–π –º–µ–º—ã –∏ —à—É—Ç–∏.',
}



# –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
def get_bot_response(messages_history: list) -> str:
    try:
        response = requests.post(
            'http://localhost:1234/v1/chat/completions',
            headers={'Content-Type': 'application/json'},
            json={
                'model': 'meta-llama-3.1-8b-instruct',
                'messages': messages_history,
                'temperature': 0.7,
                'max_tokens': 800
            },
            timeout=60
        )
    except Exception as e:
        print(str(e))
        return 'LM studio not running' if "–æ—Ç–≤–µ—Ä–≥ –∑–∞–ø—Ä–æ—Å" in str(e) else str(e)
    
    return response.json()['choices'][0]['message']['content']


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üí¨ –ß–∞—Ç')
    markup.row('‚åö –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', 'üìö –£—á—ë–±–∞')
    markup.row('‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ', 'üòÇ –ú–µ–º—ã')
    return markup

@bot.message_handler(commands=['start'])
def handle_start(message):
    logger.info(f"/start –æ—Ç {message.from_user.id}")
    text = (
        "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–¢–û–¢! "
        "—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu())
    # bot.send_chat_action(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text in CHAT_MODES)
def handle_mode_change(message):
    user_id = message.from_user.id
    mode_name = message.text
    table = CHAT_MODES[mode_name]
    
    user_modes[user_id] = table

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    prompt = PROMPTS.get(table)
    if prompt:
        save_message(table, user_id, 'system', prompt)

    bot.send_message(
        message.chat.id,
        f"üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: {mode_name}\n–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞."
    )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –≤—Å—ë, —á—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text

    table = user_modes.get(user_id, 'chat_default')

    bot.send_chat_action(chat_id, 'typing')
    save_message(table, user_id, 'user', user_text)

    history = get_history(table, user_id)
    reply = get_bot_response(history)

    save_message(table, user_id, 'assistant', reply)
    bot.send_message(chat_id, reply)


if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
